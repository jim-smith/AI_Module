<aiml>


<category>
<pattern> PLEASE _ </pattern>
<template> <srai><star index="1"/></srai></template>
</category>

<category>
<pattern> _ PLEASE </pattern>
<template> <srai><star index="1"/></srai></template>
</category>


<category>
<pattern> MYBOT _ </pattern>
<template> <srai><star index="1" /> </srai></template>
</category>

<category>
<pattern> _ MYBOT </pattern>
<template> <srai><star index="1" /> </srai></template>
</category>



<category>
<pattern> TELL ME ABOUT * </pattern>
<template><srai> DESCRIBE <star/></srai></template>
</category>

<category>
<pattern> WHAT IS * </pattern>
<template> <srai> DESCRIBE <star/></srai>
</template>
</category>

<category>
<pattern> * EXAMPLE OF *</pattern>
<template><srai>ILLUSTRATE THE CONCEPT OF <star index="2"/> </srai></template>
</category>




<category>
  <pattern> DESCRIBE * </pattern>
  <template>
    <think> <set name = "defsubject"><star/></set> </think>
    <condition name = "defsubject">     
      <li value = "long-term knowledge"> Long-term knowledge is valid every time a programme is run.</li>
      <li value = "short-term knowledge">  Short-term knowledge is only valid for a particular instance or run of a programme.</li>
      <li value= "generic knowledge">Generic knowledge is relevant to more than one application or domain.</li>
      <li value= "domain-specific knowledge">Domain-specific knowledge is only applicable to one specific application or domain.</li>
      <li value = "a fact"> A fact is a statement which asserts that a relationship holds for an object-subject pair.</li>
      <li value = "a rule"> A rule is a statement that generates new knowledge by asserting that if one fact is true, then another is also true.</li>
      <li value = "how AIML allows variables in its long-term knowledge">AIML has wildcards and srai for that purpose.</li>
      <li value ="how aiml supports variables for short-term knowledge">Predicate variables can be created and have values accessed using set and get tag pairs.</li>
      <li>In DEFINE  subject is `<get name = "defsubject"/>`  </li>
     </condition>
  </template>
</category>


<category>
<pattern> ILLUSTRATE THE CONCEPT OF * </pattern>
  <template>
    <think> <set name = "exsubject"><star/></set> </think>
      <condition name = "exsubject">
        <li value = "long-term generic knowledge"> The equations of motion  used to calculate the flight-path of a bird in the game Angry Birds.</li>    
        <li value = "long-term domain-specific knowledge">The weight of the different types of birds in the game Angry Birds.</li>    
        <li value = "short-term generic knowledge"> The date on which a specific episode of Angry Birds is played is generic because it could also be used by another programme.</li>
        <li value = "short-term domain-specific knowledge"> The number of birds that a user has fired in a particular episode of Angry Birds.</li>
        <li value = "a fact"> Jim Smith from UWE hasUWEPhoneNumber 0117 3287417.</li>    
        <li value = "a rule"> If isUWEStaff(X) then hasUWEPhone (X).</li>
        <li> In GIVE_EXAMPLE exsubject is <get name="exsubject"/></li>    
      </condition>
  </template>
</category>



<category>
<pattern> HOW DOES AIML PROVIDE CONTEXT DURING A CONVERSATION</pattern>
<template> AIML supports context through the use of the that tag to refer to previous bot answers, and via setting variables such as topic.</template>
</category>

<category>
  <pattern> WHY IS KNOWING THAT USEFUL</pattern>
  <template> 
    <think> <set name = "lastsubject"><that/></set></think>
    <condition name = "lastsubject">
      <li value = "AIML supports context through the use of the that tag to refer to previous bot answers, and via setting variables such as topic."> The fourth word in this question is an example of how some words can only be understood in context.</li>
      <li value = "AIML has wildcards and srai for that purpose.">Because it allows us to make statements that apply to classes of things or questions.</li>
      <li value="Jim Smith from UWE hasUWEPhoneNumber 0117 3287417.">I have no answer for that.</li>
    </condition>    
  </template>
</category>

</aiml>
